import json
import os
import boto3
import tempfile
import subprocess
from datetime import datetime
from botocore.exceptions import ClientError

# Initialize AWS clients
s3_client = boto3.client('s3')
sns_client = boto3.client('sns')

# Environment variables
UPLOAD_BUCKET = os.environ['UPLOAD_BUCKET_NAME']
CLEAN_BUCKET = os.environ['CLEAN_BUCKET_NAME']
QUARANTINE_BUCKET = os.environ['QUARANTINE_BUCKET_NAME']
SNS_SUCCESS_TOPIC = os.environ['SNS_SUCCESS_TOPIC_ARN']
SNS_ALERT_TOPIC = os.environ['SNS_ALERT_TOPIC_ARN']
KMS_KEY_ID = os.environ['KMS_KEY_ID']

def lambda_handler(event, context):
    """
    Scan uploaded files for malware using ClamAV
    """
    print(f"Received event: {json.dumps(event)}")
    
    try:
        # Extract S3 event information
        for record in event['Records']:
            bucket = record['s3']['bucket']['name']
            key = record['s3']['object']['key']
            
            print(f"Processing file: s3://{bucket}/{key}")
            
            # Download file to temp directory
            with tempfile.NamedTemporaryFile(delete=False) as tmp_file:
                tmp_file_path = tmp_file.name
                s3_client.download_file(bucket, key, tmp_file_path)
            
            try:
                # Scan file
                is_clean = scan_file(tmp_file_path)
                
                if is_clean:
                    # Move to clean bucket
                    handle_clean_file(bucket, key)
                    print(f"âœ“ File is clean: {key}")
                else:
                    # Move to quarantine
                    handle_infected_file(bucket, key)
                    print(f"âœ— MALWARE DETECTED: {key}")
                
            finally:
                # Clean up temp file
                if os.path.exists(tmp_file_path):
                    os.remove(tmp_file_path)
        
        return {
            'statusCode': 200,
            'body': json.dumps('Scan completed successfully')
        }
        
    except Exception as e:
        print(f"Error processing file: {str(e)}")
        # Send alert for scan failure
        send_alert(
            subject="File Scan Failed",
            message=f"Failed to scan file {key}: {str(e)}"
        )
        raise


def scan_file(file_path):
    """
    Scan file using ClamAV
    
    Note: In production, this would use the ClamAV lambda layer
    For now, we'll use a simplified mock implementation
    """
    # TODO: Implement actual ClamAV scanning
    # This requires the ClamAV Lambda layer to be built and attached
    
    # Mock implementation - check for EICAR test string
    try:
        with open(file_path, 'rb') as f:
            content = f.read()
            # EICAR test string detection
            if b'EICAR-STANDARD-ANTIVIRUS-TEST-FILE' in content:
                return False
        return True
    except Exception as e:
        print(f"Scan error: {str(e)}")
        # Err on the side of caution - quarantine if scan fails
        return False
    
    # Production implementation would look like:
    """
    try:
        # Update virus definitions
        subprocess.run(['freshclam'], check=True, capture_output=True)
        
        # Scan file
        result = subprocess.run(
            ['clamscan', '--no-summary', file_path],
            capture_output=True,
            text=True
        )
        
        # Return code 0 means clean, 1 means infected
        return result.returncode == 0
        
    except subprocess.CalledProcessError as e:
        print(f"ClamAV scan error: {e}")
        return False
    """


def handle_clean_file(source_bucket, source_key):
    """
    Move clean file to clean bucket and send notification
    """
    try:
        # Copy to clean bucket
        copy_source = {'Bucket': source_bucket, 'Key': source_key}
        s3_client.copy_object(
            CopySource=copy_source,
            Bucket=CLEAN_BUCKET,
            Key=source_key,
            ServerSideEncryption='aws:kms',
            SSEKMSKeyId=KMS_KEY_ID
        )
        
        # Delete from upload bucket
        s3_client.delete_object(Bucket=source_bucket, Key=source_key)
        
        # Send success notification (optional)
        # Uncomment if you want notifications for every clean file
        # send_notification(
        #     topic_arn=SNS_SUCCESS_TOPIC,
        #     subject="File Scanned - Clean",
        #     message=f"File {source_key} has been scanned and is clean."
        # )
        
        print(f"File moved to clean bucket: {source_key}")
        
    except ClientError as e:
        print(f"Error handling clean file: {str(e)}")
        raise


def handle_infected_file(source_bucket, source_key):
    """
    Move infected file to quarantine and send alert
    """
    try:
        # Copy to quarantine bucket
        copy_source = {'Bucket': source_bucket, 'Key': source_key}
        quarantine_key = f"quarantine/{datetime.utcnow().isoformat()}/{source_key}"
        
        s3_client.copy_object(
            CopySource=copy_source,
            Bucket=QUARANTINE_BUCKET,
            Key=quarantine_key,
            ServerSideEncryption='aws:kms',
            SSEKMSKeyId=KMS_KEY_ID,
            Metadata={
                'quarantine-reason': 'malware-detected',
                'original-key': source_key,
                'scan-timestamp': datetime.utcnow().isoformat()
            }
        )
        
        # Delete from upload bucket
        s3_client.delete_object(Bucket=source_bucket, Key=source_key)
        
        # Send security alert
        send_alert(
            subject="ðŸš¨ MALWARE DETECTED ðŸš¨",
            message=f"""
SECURITY ALERT: Malware has been detected and quarantined.

Details:
- File: {source_key}
- Quarantine Location: s3://{QUARANTINE_BUCKET}/{quarantine_key}
- Timestamp: {datetime.utcnow().isoformat()}

Action Taken:
- File moved to quarantine bucket
- Original file deleted from upload bucket
- Security team notified

Please investigate this incident immediately.
            """
        )
        
        print(f"MALWARE DETECTED - File quarantined: {quarantine_key}")
        
    except ClientError as e:
        print(f"Error handling infected file: {str(e)}")
        raise


def send_notification(topic_arn, subject, message):
    """
    Send SNS notification
    """
    try:
        sns_client.publish(
            TopicArn=topic_arn,
            Subject=subject,
            Message=message
        )
        print(f"Notification sent: {subject}")
    except ClientError as e:
        print(f"Error sending notification: {str(e)}")


def send_alert(subject, message):
    """
    Send security alert via SNS
    """
    send_notification(SNS_ALERT_TOPIC, subject, message)
